---
title: Constructors
linkTitle: Constructors # The title of left navigation, optional.
categories:
  - C++ programming
series:
  - C++
tags:
  - C++
  - Computer science
  - Easy
  - Basic knowledge
---

In C++, constructors are a type of =special method= in a class, used to initialize that class. If the class does not have such a method, the compiler will usually provide a default one, except in the following cases:

1. When it is explicitly programmed otherwise.
2. When there is an attribute in the class that cannot be default-constructed.
3. When there is at least one other constructor in the class.

The class constructor is identified as a method without a return value and has **exactly** the same name as the class.

For example:

#+name: Source Code 1
#+begin_src C++
  struct Person {
    Person(std::string name, std::string last_name);
  };
#+end_src

In this example, the =Person= struct is defined, and it has a single constructor that takes two arguments of type [[https://en.cppreference.com/w/cpp/string/basic_string][std::string]]. It's important to note that by defining a constructor for our struct, we have overridden the default constructor provided by the compiler.

The implementation of our constructor consists of two parts:

1. An initialization list, which is used to assign values to class attributes during its creation. This code is executed when the class is being created.
2. Implementation of the constructor itself, generally used to perform data validation or any special logic needed when creating new instances of the object.

#+name: Source Code 2
#+begin_src C++
  struct Person {
    Person(std::string name, std::string last_name)
        : // Start of the initialization list.
          name_(name), last_name_(last_name) {
      if (name.size() < 3) {
        throw std::runtime_error("Name is too short");
      }
    }

  private:
    std::string name_;
    std::string last_name_;
  };
#+end_src

In the provided example, we use the initialization list to assign the name and last name of the person during the object's creation. And within the constructor's logic, we validate that the entered name is not less than three characters long.

It's worth noting that although this might not be a very realistic or everyday-use example, it reflects the functioning and usefulness of a constructor.
